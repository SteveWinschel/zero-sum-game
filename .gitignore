# Generated by Cargo
# will have compiled files and other artifacts
**/target/
# Remove Cargo.lock from gitignore if you are working on a library,
# but for a binary project like a game, it's generally recommended to commit it.
# Cargo.lock

# Rust Toolchain
rust-toolchain
rust-toolchain.toml

# Editors
## VS Code
.vscode/

## IntelliJ (RustRover, CLion with Rust plugin)
.idea/
*.iml

## Sublime Text
*.sublime-project
*.sublime-workspace

## Zed
.zed/
# Zed also uses .vscode/settings.json for some project settings, covered by .vscode/

## Emacs
*~
#*#
/.emacs.d/auto-save-list
tramp
.\#*

## Vim
[._]*.s[a-v][a-z]
[._]*.sw[a-p]
[._]s[a-v][a-z]
[._]sw[a-p]
*.un~
Session.vim
.netrwhist
TAGS

# Operating System Files
## macOS
.DS_Store
.AppleDouble
.LSOverride
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

## Linux
*~
# Various temporary files
*.tmp
*.temp
*.bak
*.old
*.orig
*.swp
*.swo
*.elf
*.o
*.obj
*.a
*.so
*.dylib
*.bundle
*.pyc
*.pyo
*.pyd
*.class

# Pop!_OS / Linux specific (General)
# Desktop configuration files
.directory
Desktop.ini
# Trash files
.Trash-*/

# Build Systems & Artifacts
## General Build
/build/
/dist/
/out/
/output/
/bin/
/release/
/debug/
*.ll
*.bc

# Node.js (if you happen to use it for any tooling)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json # if you prefer not to commit it for tooling
yarn.lock          # if you prefer not to commit it for tooling

# Python (if you happen to use it for any tooling)
__pycache__/
*.py[cod]
*$py.class
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
instance/
*.sqlite3
*.db

# Environment files
.env
.env.*
!.env.example

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids/
*.pid
*.seed
*.pid.lock

# Coverage output
coverage/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/

# Local secrets and sensitive information
secrets.yml
secrets.json
*.pem
*.key
*.keypair
credentials*
*.gpg
*.pgp

# Cloud
.terraform/
terraform.tfstate*
*.tfvars

# Specific to Bevy (though `target/` usually covers most of this)
# Assets that might be processed or bundled into `target/`
# but you might want to explicitly ignore source folders if they are huge
# and generated/downloaded.
# /assets_processed/

# Backup files created by some editors
*~
*.bak
*.tmp
*.swp
*.swo

# Zed specific files (if any not covered by .zed/ or generic editor rules)
# Generally, .zed/ should cover project-specific Zed state.

# User-specific files (generally good to ignore if they might be created)
*.user
*.userprefs

# Crash Reports (if your application generates them locally)
*.RUST_BACKTRACE
*.dmp # Windows crash dumps
*.core # Linux core dumps

# ignore main.rs file if the file is not available
# zero-sum-game/src/main.rs
